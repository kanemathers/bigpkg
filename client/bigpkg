#!/bin/sh

CWD=${CWD:=~/.nicepkg}
STAGE=${STAGE:=/tmp/nicepkg}
PREFIX=${PREFIX:=/}

INDEX_LOCAL="${CWD}/local.db"
INDEX_REMOTE="${CWD}/remote.db"

PKG_DIR="${STAGE}/pkg"
BUILD_DIR="${STAGE}/build"
LOCKFILE="${STAGE}/bigpkg.lock"

if [ -z "${SERVER}" ]; then
    echo 'error: unset variable SERVER' >&2

    exit 1
fi

__PWD=$(pwd)

install()
{
    local package=$1
    local build
    local src
    local dst
    local filename

    [ -n "${package}" ] || return 1

    if grep -q "^${package}" $INDEX_LOCAL; then
        echo "error: target not found: ${package}" >&2

        return 1
    fi

    src=$(package_download $package) || return 1
    build="${BUILD_DIR}/${package}"

    mkdir $build || return 1

    # TODO: this sucks. find out why tars ``-C`` flag isn't working
    cd $build
    tar xzf $src 2>/dev/null
    cd $__PWD

    # BUG: need package name written to local db so we can roll back on error
    # below. but if there's no files in the build dir, ``remove`` will error
    # and the package will be stuck (can't rm it).
    grep $package $INDEX_REMOTE >> $INDEX_LOCAL

    for i in $(find $build -type f); do
        filename="${i:${#build} + 1}"
        dst=$(dirname "${PREFIX}/${filename}")

        echo "${filename}" >> "${CWD}/pkgs/${package}.db"

        mkdir -p $dst || (remove $package; return 1)
        mv -f $i $dst || (remove $package; return 1)
    done

    return 0
}

remove()
{
    local package=$1

    [ -n "${package}" ] || return 1

    if ! grep -q "^${package}" $INDEX_LOCAL; then
        echo "error: target not found: ${package}" >&2

        return 1
    fi

    # TODO: remove stale folders... somehow
    while read line; do
        rm -f "${PREFIX}/${line}" || return 1
    done < "${CWD}/pkgs/${package}.db" || return 1

    rm -f "${CWD}/pkgs/${package}.db"
    sed "/^${package}/d" $INDEX_LOCAL > $INDEX_LOCAL

    return 0
}

update()
{
    local index

    index=$(index_fetch)

    if [ $? != 0 ]; then
        echo "error: failed to fetch index" >&2

        return 1
    fi

    rm -f "${INDEX_REMOTE}" || return 1
    echo "${index}" > "${INDEX_REMOTE}" || return 1

    return 0
}

upgrade()
{
    local package
    local checksum
    local remote

    while read line; do
        package=$(echo "${line}" | awk '{print $1}')
        checksum=$(echo "${line}" | awk '{print $2}')

        # failed grep means package has been rm'd from upstream
        remote=$(grep "^${package}" $INDEX_REMOTE) || continue

        if [ "$(echo "${remote}" | awk '{print $2}')" == "${checksum}" ]; then
            continue
        fi

        # TODO: separate building and installing so we can ensure upgrade
        # will apply before removing the current version
        remove $package
        install $package
    done < $INDEX_LOCAL || return 1

    return 0
}

package_download()
{
    local package=$1
    local url
    local dst

    [ -n "${package}" ] || return 1

    url="${SERVER}/packages/${package}.tar.gz"
    dst="${PKG_DIR}/${package}.tar.gz"

    if ! grep -q "^${package}" $INDEX_REMOTE; then
        return 1
    fi

    while ! download $url $dst; do
        sleep 5
    done

    echo "${dst}"

    return 0
}

index_fetch()
{
    local index

    index=$(wget -O - "${SERVER}/packages" 2>/dev/null) || return 1

    echo "${index}"

    return 0
}

download()
{
    local url=$1
    local output=$2
    local headers
    local checksum

    [ -n "${url}" -a -n "${output}" ] || return 1

    #mkdir -p $(dirname "${output}") || return 1

    headers=$(wget -S -O "${output}" "${url}" 2>&1 >/dev/null)

    if [ $? != 0 ]; then
        rm -f "${output}"

        return 1
    fi

    checksum=$(echo "${headers}" | grep -i "X-Checksum" | awk '{print $2}')

    if [ -z "${checksum}" ] || [ "$(hash_file "${output}")" != "${checksum}" ]; then
        rm -f "${output}"

        return 1
    fi

    return 0
}

hash_file()
{
    local path=$1
    local checksum

    [ -n "${path}" ] || return 1

    checksum=$(md5sum "${path}" 2>/dev/null | awk '{print $1}') || return 1

    echo "${checksum}"

    return 0
}

at_exit()
{
    rm -rf "${LOCKFILE}"
    rm -rf "${STAGE}"
}

mkdir -p $CWD || exit 1
mkdir -p $STAGE || exit 1
mkdir -p $PKG_DIR || exit 1
mkdir -p $BUILD_DIR || exit 1

mkdir -p "${CWD}/pkgs"

touch $INDEX_LOCAL
touch $INDEX_REMOTE

if ! mkdir "${LOCKFILE}" 2>/dev/null; then
    echo "> Already running" >&2

    exit
fi

trap "at_exit; exit" INT TERM EXIT

if [ $# -lt 1 ]; then
    echo "Usage: bigpkg [install|remove|update|upgrade]"

    exit 1
fi

case $1 in
    install)
        if [ -z "$2" ]; then
            echo "error: no target specified" >&2

            exit 1
        fi

        install $2 || exit 1
        ;;

    remove)
        if [ -z "$2" ]; then
            echo "error: no target specified" >&2

            exit 1
        fi

        remove $2 || exit 1
        ;;

    update)
        update || exit 1
        ;;

    upgrade)
        upgrade || exit 1
        ;;

esac
